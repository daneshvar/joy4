// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import mp4io "github.com/daneshvar/joy4/format/mp4/mp4io"

// Atom is an autogenerated mock type for the Atom type
type Atom struct {
	mock.Mock
}

// Children provides a mock function with given fields:
func (_m *Atom) Children() []mp4io.Atom {
	ret := _m.Called()

	var r0 []mp4io.Atom
	if rf, ok := ret.Get(0).(func() []mp4io.Atom); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mp4io.Atom)
		}
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *Atom) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Marshal provides a mock function with given fields: _a0
func (_m *Atom) Marshal(_a0 []byte) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Pos provides a mock function with given fields:
func (_m *Atom) Pos() (int, int) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// Tag provides a mock function with given fields:
func (_m *Atom) Tag() mp4io.Tag {
	ret := _m.Called()

	var r0 mp4io.Tag
	if rf, ok := ret.Get(0).(func() mp4io.Tag); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mp4io.Tag)
	}

	return r0
}

// Unmarshal provides a mock function with given fields: _a0, _a1
func (_m *Atom) Unmarshal(_a0 []byte, _a1 int) (int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte, int) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
